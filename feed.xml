<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://yanjambo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yanjambo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-19T19:42:14+00:00</updated><id>https://yanjambo.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Chongqing - The Mountain City of Cyberpunk Magic</title><link href="https://yanjambo.github.io/blog/2025/chongqing-cyberpunk-city/" rel="alternate" type="text/html" title="Chongqing - The Mountain City of Cyberpunk Magic"/><published>2025-03-19T16:00:00+00:00</published><updated>2025-03-19T16:00:00+00:00</updated><id>https://yanjambo.github.io/blog/2025/chongqing-cyberpunk-city</id><content type="html" xml:base="https://yanjambo.github.io/blog/2025/chongqing-cyberpunk-city/"><![CDATA[<h1 id="chongqing---the-mountain-city-of-cyberpunk-magic">Chongqing - The Mountain City of Cyberpunk Magic</h1> <p>A visual journey through the vertical cityscape of Chongqing, where traditional mountain terrain meets futuristic urban development.</p> <h2 id="urban-landscapes">Urban Landscapes</h2> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0704.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0709.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0714.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0716.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0720.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0725.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0743.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0744.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0758.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0778.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0788.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0790.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <div class="row"> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0800.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> <div class="col-sm-6"> <img src="/assets/img/photography/DSC_0881.jpg" class="img-fluid" alt="Chongqing cityscape"/> </div> </div> <p><em>All photographs were taken during my visit to Chongqing in 2024. These images capture the city’s unique character as a place where dramatic topography meets modern urban development, creating what many call China’s most cyberpunk city.</em></p>]]></content><author><name></name></author><category term="photography"/><category term="photography"/><category term="chongqing"/><category term="urban-landscape"/><category term="cyberpunk"/><category term="architecture"/><summary type="html"><![CDATA[A photographic exploration of Chongqing's unique urban landscape.]]></summary></entry><entry><title type="html">Extracting Sequences from Genomes Using BLAST Results</title><link href="https://yanjambo.github.io/blog/2025/extracting-sequences-from-blast/" rel="alternate" type="text/html" title="Extracting Sequences from Genomes Using BLAST Results"/><published>2025-03-19T15:00:00+00:00</published><updated>2025-03-19T15:00:00+00:00</updated><id>https://yanjambo.github.io/blog/2025/extracting-sequences-from-blast</id><content type="html" xml:base="https://yanjambo.github.io/blog/2025/extracting-sequences-from-blast/"><![CDATA[<h1 id="extracting-sequences-from-genomes-using-blast-results-a-practical-guide">Extracting Sequences from Genomes Using BLAST Results: A Practical Guide</h1> <p>When working with genomic data, researchers often need to extract specific sequences from a genome based on BLAST search results. This process requires careful handling, especially when dealing with sequence orientation (positive or negative strand). In this post, I’ll share a Python script that automates this task while properly accounting for strand orientation.</p> <h2 id="the-challenge">The Challenge</h2> <p>BLAST (Basic Local Alignment Search Tool) is commonly used to identify regions of similarity between biological sequences. When you get BLAST results, you’ll have information about:</p> <ul> <li>Which parts of your query matched the genome</li> <li>Where these matches are located in the genome</li> <li>Whether the matches are on the forward (+) or reverse (-) strand</li> </ul> <p>Manually extracting these sequences would be tedious and error-prone, especially when dealing with multiple hits or when sequences are on the negative strand and need to be reverse-complemented.</p> <h2 id="the-solution-automated-sequence-extraction">The Solution: Automated Sequence Extraction</h2> <p>Here’s a Python script that uses the Biopython library to extract sequences from a genome based on BLAST results:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python
#!/usr/bin/env python3
import argparse
from Bio import SeqIO
from Bio.Seq import Seq

def extract_sequences(blast_file, genome_file, output_file):
# Parse genome file
genome_dict = {}
for record in SeqIO.parse(genome_file, "fasta"):
    genome_dict[record.id] = str(record.seq)

# Store regions to extract
regions_to_extract = []

# Parse BLAST output file
with open(blast_file, 'r') as f:
    for line in f:
        if line.startswith('#'):
            continue
        
        parts = line.strip().split('\t')
        # Assuming BLAST output format: query_id, subject_id, identity, alignment_length, ...
        # Columns 9 and 10 are subject start and end positions
        # Column 12 is strand information (+/-)
        
        if len(parts) &lt; 12:
            continue
            
        query_id = parts[0]
        subject_id = parts[1]
        start = int(parts[8])
        end = int(parts[9])
        strand = parts[11]
        
        # Ensure start position is less than end position
        if start &gt; end:
            start, end = end, start
        
        regions_to_extract.append({
            'query_id': query_id,
            'subject_id': subject_id,
            'start': start,
            'end': end,
            'strand': strand
        })

# Extract sequences and write to output file
with open(output_file, 'w') as out:
    for region in regions_to_extract:
        if region['subject_id'] not in genome_dict:
            print(f"Warning: Could not find {region['subject_id']} in the genome")
            continue
        
        # Extract sequence from genome
        sequence = genome_dict[region['subject_id']][region['start']-1:region['end']]
        
        # If on negative strand, reverse complement the sequence
        if region['strand'] == '-':
            sequence = str(Seq(sequence).reverse_complement())
        
        # Write in FASTA format
        header = f"&gt;{region['query_id']}|{region['subject_id']}:{region['start']}-{region['end']}:       {region['strand']}"
        out.write(f"{header}\n{sequence}\n")

def main():
parser = argparse.ArgumentParser(description='Extract sequences from a genome based on BLAST results')
parser.add_argument('-b', '--blast', required=True, help='Path to BLAST output file')
parser.add_argument('-g', '--genome', required=True, help='Path to genome FASTA file')
parser.add_argument('-o', '--output', required=True, help='Path to output file')

args = parser.parse_args()

extract_sequences(args.blast, args.genome, args.output)

if __name__ == "__main__":
main()
</code></pre></div></div> <h2 id="how-it-works">How It Works</h2> <p>The script performs the following steps:</p> <ol> <li><strong>Load the genome into memory</strong>: It reads the genome FASTA file and stores it as a dictionary for quick access.</li> <li><strong>Parse the BLAST results</strong>: It reads through the BLAST output file, extracting key information like sequence IDs, start/end positions, and strand orientation.</li> <li><strong>Extract and process sequences</strong>: For each hit, it extracts the corresponding sequence from the genome, reverse complementing it if it’s on the negative strand.</li> <li><strong>Output in FASTA format</strong>: It writes the extracted sequences to a FASTA file with informative headers.</li> </ol> <h2 id="using-the-script">Using the Script</h2> <p>To use this script, you’ll need:</p> <ul> <li>Python 3</li> <li>The Biopython library (<code class="language-plaintext highlighter-rouge">pip install biopython</code>)</li> <li>A BLAST output file in tabular format (e.g., obtained with <code class="language-plaintext highlighter-rouge">-outfmt 6</code> option)</li> <li>A genome FASTA file</li> </ul> <p>Run the script with:</p> <p>bash python extract_sequences.py -b blast_results.txt -g genome.fasta -o extracted_sequences.fasta</p> <h2 id="example-usage-scenario">Example Usage Scenario</h2> <p>Let’s walk through a typical use case:</p> <ol> <li> <p><strong>Generate BLAST results</strong>:</p> <p>bash blastn -query my_genes.fasta -db genome.fasta -outfmt “6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue sstrand” -out blast_hits.txt</p> </li> <li> <p><strong>Examine the BLAST output</strong>:</p> <p>gene1 chromosome1 98.5 200 3 0 1 200 5000 5199 0.0 + gene2 chromosome2 99.0 150 1 1 5 154 3000 2851 0.0 -</p> </li> <li> <p><strong>Run the extraction script</strong>:</p> <p>bash python extract_sequences.py -b blast_hits.txt -g genome.fasta -o extracted_sequences.fasta</p> </li> <li> <p><strong>Check the extracted sequences</strong>:</p> <blockquote> <p>gene1|chromosome1:5000-5199:+ ATGCCTGAATTAGCTAGCTAGCTAGCTGATCGATCGTAGCTAGCTAGCCGTATCGTAGC… gene2|chromosome2:2851-3000:- CTAGCTAGCAGCTGCTATTATCGCGCTAGCTAGCGCGCGTATTTTAGCGATCGTTAGCT…</p> </blockquote> </li> </ol> <p>Notice how the second sequence has been reverse-complemented because it matched on the negative strand.</p> <h2 id="important-considerations">Important Considerations</h2> <ul> <li><strong>BLAST output format</strong>: The script assumes BLAST output in tabular format with specific column positions. Adjust the parsing logic if your format differs.</li> <li><strong>Coordinate systems</strong>: BLAST uses 1-based coordinates, and the script handles this accordingly.</li> <li><strong>Memory usage</strong>: For very large genomes, you might need to optimize the script to reduce memory consumption.</li> <li><strong>Error handling</strong>: The script includes basic error checking but could be enhanced with more robust validation.</li> </ul> <h2 id="final-thoughts">Final Thoughts</h2> <p>This script addresses a common need in genomic analysis workflows. By automating the extraction of sequences from BLAST results while handling strand orientation correctly, it saves time and reduces the risk of errors.</p> <p>For more complex scenarios, you might want to extend the script to handle additional features such as:</p> <ul> <li>Support for different BLAST output formats</li> <li>Extraction of flanking regions around hits</li> <li>Batch processing of multiple BLAST files</li> <li>Integration with other genomic analysis tools</li> </ul> <p>Happy coding and sequence analyzing!</p>]]></content><author><name></name></author><category term="tutorials"/><category term="bioinformatics"/><category term="python"/><category term="blast"/><category term="genomics"/><category term="sequence-analysis"/><summary type="html"><![CDATA[A practical guide to extracting sequences from genomes based on BLAST search results with proper handling of strand orientation.]]></summary></entry></feed>